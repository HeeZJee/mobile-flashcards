"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=decks;var _typeof2=_interopRequireDefault(require("@babel/runtime/helpers/typeof"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _index=require("../actions/index");var _DATA=require("../utils/_DATA");function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return(0,_typeof2["default"])(key)==="symbol"?key:String(key);}function _toPrimitive(input,hint){if((0,_typeof2["default"])(input)!=="object"||input===null)return input;var prim=input[typeof Symbol==="function"?Symbol.toPrimitive:"@@toPrimitive"];if(prim!==undefined){var res=prim.call(input,hint||"default");if((0,_typeof2["default"])(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function decks(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case _index.RECEIVE_DECKS:return _objectSpread({},state,{},action.decks);case _index.ADD_DECK:var title=action.title;return _objectSpread({},state,(0,_defineProperty2["default"])({},title,{title:title,questions:[]}));case _index.REMOVE_DECK:var id=action.id;var value=state[id],remainingDecks=(0,_objectWithoutProperties2["default"])(state,[id].map(_toPropertyKey));return remainingDecks;case _index.ADD_CARD:var deckId=action.deckId,card=action.card;return _objectSpread({},state,(0,_defineProperty2["default"])({},deckId,_objectSpread({},state[deckId],{questions:(0,_toConsumableArray2["default"])(state[deckId].questions).concat(card)})));case _index.RESET_STORE:return _DATA.decks;default:return state;}}